package Tests;

import static org.junit.Assert.*;

import java.awt.geom.Point2D;

import org.junit.Before;
import org.junit.Test;

import Problem.Age;
import Problem.DistanceMetric;
import Problem.DistanceMetric.AgeMetric;
import Problem.DistanceMetric.DoubleMetric;
import Problem.DistanceMetric.EuclideanMetric;
import Problem.Feature;

public class DistanceMetricTest {
	private DistanceMetric.DoubleMetric doubleMetric;
	private DistanceMetric.AgeMetric ageMetric;
	private DistanceMetric.EuclideanMetric euclideanMetric;
	private Feature.Age_ age;
//	private Feature.Age_ age;
	private double delta = 0.000000000000001;
	private EuclideanMetric e1;
	private EuclideanMetric e2;
	private DoubleMetric d2;
	private DoubleMetric d1;
	private AgeMetric a;
	@Before
	public void setUp(){

//		age = new Age_();
		doubleMetric = new DoubleMetric();
		ageMetric = new AgeMetric();
		euclideanMetric = new EuclideanMetric();
		
		DoubleMetric d1 = new DoubleMetric();
		DoubleMetric d2 = new DoubleMetric();

		e1 = new EuclideanMetric();
		e2 = new EuclideanMetric();
		a = new AgeMetric();
	}
	
	@Test
	public void testDoubleMetric() {
		double shouldBe0 = d1.calculateDistance(4.0,4.0);
		double shouldBe1 = d2.calculateDistance(4.0, 3.0);
		
		assertTrue(0==shouldBe0);
		assertTrue(1==shouldBe1);
		
	}
	
	@Test
	public void testEuclideanMetric() {
		Point2D p1 = new Point2D.Double (11.0,77.0);
		Point2D p2 = new Point2D.Double (77.0,77.0);
		
		Point2D p3 = new Point2D.Double (77.0,77.0);
		Point2D p4 = new Point2D.Double (77.0,77.0);
		
		double shouldBeNum = e1.calculateDistance(p1,p2);
		double shouldBe0 = e2.calculateDistance(p3, p4);

	}
	
	@Test
	public void testDoublePositiveNumbers() {
		assertEquals(doubleMetric.calculateDistance(5.7,2.9), 2.8, delta);
	}
	
	@Test
	public void testDoubleNegativeNumbers(){
		assertEquals(doubleMetric.calculateDistance(5.7,(-1*2.9)), 8.6, delta);
	}
	
	@Test
	public void testAgeMetricDifferentAges() {
		assertEquals(ageMetric.calculateDistance(Age.newer,Age.older), 1.0, delta);
	}
	
	@Test
	public void testAgeMetricSameAgesOlder(){
		assertEquals(ageMetric.calculateDistance(Age.older,Age.older), 0.0, delta);
	}
	
	@Test
	public void testAgeMetricSameAgesNewer(){
		assertEquals(ageMetric.calculateDistance(Age.newer,Age.newer), 0.0, delta);
	}
	
	@Test
	public void testEuclideanMetricXAxis(){
		Point2D firstPoint = new Point2D.Double(3.0,0.0);
		Point2D secondPoint = new Point2D.Double(4.0,0.0);
		assertEquals(euclideanMetric.calculateDistance(firstPoint, secondPoint), 1.0, delta);
	}
	
	@Test
	public void testEuclideanMetricYAxis(){
		Point2D firstPoint = new Point2D.Double(0.0,6.0);
		Point2D secondPoint = new Point2D.Double(0.0,3.0);
		assertEquals(euclideanMetric.calculateDistance(firstPoint, secondPoint), 3.0, delta);
	}
	
	@Test
	public void testEuclideanMetricXY(){
		Point2D firstPoint = new Point2D.Double(3.0,10.0);
		Point2D secondPoint = new Point2D.Double(9.0,22.0);
		assertEquals(euclideanMetric.calculateDistance(firstPoint, secondPoint), firstPoint.distance(secondPoint), delta);
	}

}

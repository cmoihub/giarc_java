package Problem;

import javax.swing.*;

import feature.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * This class represents a list of training examples and a test examples, 
 * It is the main entity of the application which the gui or the console use to visually represent to users how the application works
 * It governs user creation and modification of examples in the format specified by Professor Babak Esfandiari in the project document
 *    
 * 
 * Created by CraigBook on 2017-11-09.
 * worked on by: Daman
 */
public class Problem {
	private List<Example> trainingExamples;
	private Example testExample;
	private List<BaseFeature> features;
	private BaseFeature featureToPredict_ = null;
	public DefaultListModel<String> feature_all_defaultListModel;
	public DefaultListModel<Feature> feature_selected_defaultListModel;
	private int trainingExampleNumber;
	private Set<String> featureStringSet;

	public Problem() {

		features = new ArrayList<>();
		setTrainingExamples(new ArrayList<Example>());
		testExample = new Example();
		feature_all_defaultListModel = new DefaultListModel<>();
		feature_selected_defaultListModel = new DefaultListModel<>();
		featureStringSet = new HashSet<String>();
	}

	/**
	 * convert feature in string form to an actual feature
	 *
	 * @param feature
	 */
	public void addFeatures(String feature) {
		switch (feature) {
			default:
				System.out.println("Todo: Implement complex feature");
				break;
		}
	}

	/**
	 * get features associated with problem
	 *
	 * @return
	 */
	public List<BaseFeature> getFeatures() {
		return this.features;
	}

	/**
	 * get feature strings
	 *
	 * @return
	 */
	public Set<String> getFeatureStringSet() {
		return this.featureStringSet;
	}

	/**
	 * add feature f to the set of features and update the model
	 *
	 * @param f
	 */
	public void addFeature(Feature f) {
		if (f == null)
			return;
		if (!features.contains(f) || feature_selected_defaultListModel.contains(f)) {
			features.add(f);
			feature_selected_defaultListModel.addElement(f);
			
		}
	}

	/**
	 * add a new training example
	 *
	 * @param e
	 */
	public void addTrainingExample(Example e) {
		this.getTrainingExamples().add(e);
	}

	/**
	 * set the test example to a new value
	 *
	 * @param e
	 */
	public void setTestExample(Example e) {
		this.testExample = e;
	}

	/**
	 * add more training examples
	 *
	 * @param e
	 */
	public void addTrainingExamples(ArrayList<Example> e) {
		this.getTrainingExamples().addAll(e);
	}

	/**
	 * check how many training examples there are
	 *
	 * @return
	 */
	public int getTrainingSize() {
		return this.getTrainingExamples().size();
	}

	
	/**
	 * set the feature to predict for the test example
	 *
	 * @param f
	 */
	public void setFeatureToPredict(BaseFeature f) {
		setFeatureToPredict_(f);
	}

	/**
	 * get feature to predict for test example
	 *
	 * @return
	 */
	public BaseFeature getFeatureToPredict() {
		return featureToPredict_;
	}

	/**
	 * setup training and test examples
	 */
	public void setExamples() {
		for (Example example : getTrainingExamples()) {
			example.setFeatures(features);
		}
		List<BaseFeature> copy = new ArrayList<>(features);
		
		for(BaseFeature f: copy) {
			if(f.equals(featureToPredict_)){
				copy.remove(getFeatureToPredict());
			}
			
			
		}
		
		testExample.setFeatures(copy);
		System.out.println(testExample.getFeatures());
	}

	/**
	 * update the number of training examples
	 *
	 * @param no
	 */
	public void setTrainingExampleNo(int no) {
		trainingExampleNumber = no;
	}
	/**
	 * 
	 * @param num
	 */
	public void  createTrainingExamples(int num) {
		for(int i = 0; i <num; i++ ) {
			getTrainingExamples().add(new Example());
		}

		setExamples();

	}

	/**
	 * 
	 * @param feature
	 * @return
	 */
	public Feature createFeature(String feature) {
		switch (feature) {
			default:
				System.out.println("Todo: Implement complex feature");
				return null;

		}
	}

	public int numFeatures() {
		return 0;
//		return featureStrings.length;
	}

	public List<Example> getTrainingExamples() {
		return trainingExamples;
	}

	public BaseFeature getFeatureToPredict_() {
		return featureToPredict_;
	}

	public void setFeatureToPredict_(BaseFeature featureToPredict_) {
		this.featureToPredict_ = featureToPredict_;
	}
	
	/**
	 * 
	 * @return problem in xml format
	 */
	public String toXML(){
		String s = "<Problem>";
		List<Example> examples = new ArrayList<>(getTrainingExamples());
		examples.add(testExample);
		for (Example e : examples) {
			String opening = "\t\t" + "\n";
			s+=opening;
			s+=e.toXML();
		}
		return s+="\n</Problem>";
	}

	public void setTrainingExamples(List<Example> trainingExamples) {
		this.trainingExamples = trainingExamples;
	}
	
	
}

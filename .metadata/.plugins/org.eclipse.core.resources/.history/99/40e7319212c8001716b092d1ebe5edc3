package Problem;

import javafx.embed.swing.JFXPanel;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;

import com.sun.xml.internal.ws.api.PropertySet;

import java.awt.event.ActionListener;

/**
 * Created by CraigBook on 2017-11-09.
 */
public class ProblemView extends JFrame {
    private Problem problem;
    private JMenuBar menuBar;
    private JButton addFeature;
    private JButton predict;
    private JPanel allFeaturesPanel;
    private JPanel selectedFeaturesPanel;
    private DefaultListModel<String> feature_defaultListModel;
    private DefaultListModel<Feature> selectedFeatures;
    private String selectedFeature;
    private String selectedFeature_;
    private JList<String> feature_jList;
    private JList<Feature> selectedFeatures_jList;
    private JTextField predictionFeature;
    private JTextField trainingExampleNo;
    private JPanel container;
    
    /**
     *
     * @param problem
     */
    ProblemView(Problem problem){
        super("Select Features");
        container = new JPanel();
        System.out.println("Display possible features");
        this.problem = problem;

        menuBar = new JMenuBar();
        this.setJMenuBar(menuBar);

//        removeFeature = new JButton("Remove Features");
//        menuBar.add(removeFeature);

        addFeature = new JButton("Add Features");
        menuBar.add(addFeature);
        allFeaturesPanel = new JPanel();
        showFeatures(problem.feature_all_defaultListModel);

        predict = new JButton("Feature to Predict");
        menuBar.add(predict);

        selectedFeaturesPanel = new JPanel();
        showSelection(problem.feature_selected_defaultListModel);

        predictionFeature = new JTextField(10);
        predictionFeature.setEditable(false);
        selectedFeaturesPanel.add(predictionFeature);
        
        trainingExampleNo = new JTextField(10);
        selectedFeaturesPanel.add(trainingExampleNo);
        
        container.setLayout(new BoxLayout(container, BoxLayout.X_AXIS));
        container.add(allFeaturesPanel);
        container.add(selectedFeaturesPanel);
        this.add(container);
        setup(this);
    }

    /**
     * this function applies desired settings to a jframe
     *
     * @param frame
     */
    void setup(JFrame frame){
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
//        frame.setTitle(title);
        frame.setSize(400,400);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }

    /**
     *
     */
    public void showPrediction(){
        predictionFeature.setText(problem.getFeatureToPredict().toString());
    }

    /**
     *
     * @param features
     */
    public void showFeatures(DefaultListModel<String> features){
        feature_defaultListModel = features;
        feature_jList = new JList<String>(feature_defaultListModel);
        feature_jList.addListSelectionListener(
                listSelectionEvent -> {
                    selectedFeature = feature_jList.getSelectedValue();
                }
        );
        feature_jList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        allFeaturesPanel.add(feature_jList);
    }

    /**
     *
     * @param features a trimmed down list of features to use to set up examples
     */
    public void showSelection(DefaultListModel<Feature> features){
        selectedFeatures = features;
        selectedFeatures_jList = new JList<Feature>(selectedFeatures);
        selectedFeatures_jList.addListSelectionListener(
                listSelectionEvent->{
                    selectedFeature_ = feature_jList.getSelectedValue();
                }
        );
        selectedFeaturesPanel.add(selectedFeatures_jList);
    }
    
    public String getTrainingExampleNumber(){
    	return trainingExampleNo.getText();
    }

    /**
     *
     * @return the currently selected feature from the list that shows all the features
     */
    public String getSelectedItem(){
        return feature_jList.getSelectedValue();
    }

    /**
     *
     * @return the feature from the list with features to be used to set up examples
     */
    public Feature getSelectedFeature(){
        return selectedFeatures_jList.getSelectedValue();
    }
    
    public JList getFeatures(){
    	return selectedFeatures_jList;
    }

    void _button(ActionListener listener, JComponent comp){
    	comp.addActionListener(listener);
    }
    
    /**
     *
     * @param listener
     */
    void _add(ActionListener listener){addFeature.addActionListener(listener);}

    /**
     *
     * @param listener
     */
    void _predict(ActionListener listener){predict.addActionListener(listener);}
    
    void _sendTrainingExampleNo(ActionListener listener){trainingExampleNo.addActionListener(listener);}
    
    
}
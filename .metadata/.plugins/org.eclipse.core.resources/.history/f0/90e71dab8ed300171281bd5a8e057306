package Problem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Class for running KNN algorithm
 * @author CraigBook
 *
 */
public class KNN {
	private MetricEvaluator metricEvaluator;
	private HashMap<GeneralExample, Double> distances;
	
	public KNN(){
		metricEvaluator = new MetricEvaluator();
		distances = new HashMap<>();
	}
	
	/**
	 * setup the k nearest neighbours list to some test example based on a list of training examples
	 *
	 * @param k number of nearest neighbours to return
	 * @return closest neighbours to testExample
	 */
	public List<GeneralExample> getNearestNeighbours(int k, List<GeneralExample> trainingExamples, GeneralExample testExample) {
		metricEvaluator.setTestExample(testExample);
		mapTrainingExamplesToTestExample(trainingExamples, metricEvaluator);
		Map<GeneralExample, Double> sortedDistances = sortMapByValue(distances);
		List<GeneralExample> nearestNeighbours = new ArrayList<>();
		chooseFirstKNeighbours(k, nearestNeighbours, new ArrayList<>(sortedDistances.keySet()));
		return nearestNeighbours;
	}
	
	
	/**
	 * 
	 * @param k number of neighbours to choose
	 * @param nearestNeighbours list to use to initialize nearest neighbours 
	 * @param allNeighbours all possible neighbours sorted by distance to test example
	 */
	public void chooseFirstKNeighbours(int k, List<GeneralExample> nearestNeighbours, List<GeneralExample> allNeighbours){
		for (int i = 0; i < k; i++) {
			nearestNeighbours.add(allNeighbours.get(i));
		}
	}	
	
	/**
	 * map training examples to their distance to the test example
	 * 
	 * @param trainingExamples
	 * @param metricEvaluator
	 */
	private void mapTrainingExamplesToTestExample(ArrayList<GeneralExample> trainingExamples, MetricEvaluator metricEvaluator){
		for (int i = trainingExamples.size() - 1; i >= 0; i--) {
			distances.put(trainingExamples.get(i), metricEvaluator.sumOfDistances(trainingExamples.get(i)));
		}
	}

	/**
	 *
	 * @param map
	 * @param <K>
	 * @param <V>
	 * @return a hashmap that has been sorted by value
	 */
	private static <K, V extends Comparable<? super V>> Map<GeneralExample, Double> sortMapByValue(Map<GeneralExample, Double> map) {
		return map.entrySet()
				.stream()
				.sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
				.collect(Collectors.toMap(
						Map.Entry::getKey,
						Map.Entry::getValue,
						(e1, e2) -> e1,
						LinkedHashMap::new
				));
	}
	
//	public static void main(String[] args) {
//		ArrayList<BaseFeature> features = new ArrayList<BaseFeature>();
//		ArrayList<BaseFeature> features1 = new ArrayList<BaseFeature>();
//	
//		ArrayList<BaseFeature> featuresTest = new ArrayList<BaseFeature>();
//	
//		features.add(new NumberFeature(1.9));features.add(new NumberFeature(-167));
//		features.add(new NumberFeature(63.8));features.add(null);
//		features.add(new NumberFeature(39.1));features.add(new StringFeature("kick"));
//		
//		featuresTest.add(new NumberFeature(5));featuresTest.add(new NumberFeature(-200));
//		featuresTest.add(new NumberFeature(70));featuresTest.add(null);
//		featuresTest.add(new NumberFeature(86));featuresTest.add(new StringFeature("kick"));
//		
//		features1.add(new NumberFeature(1.8));features1.add(new NumberFeature(-177));
//		features1.add(new NumberFeature(63));features1.add(null);
//		features1.add(new NumberFeature(38.1));features1.add(new StringFeature("kick"));
//		
//		GeneralExample train0 = new GeneralExample(features1);
//		GeneralExample train1 =  new GeneralExample(features);
//		
//		GeneralExample testExample =  new GeneralExample(featuresTest);
//	
//		
//		ArrayList<GeneralExample> trainingExamples = new ArrayList<GeneralExample>();
//		trainingExamples.add(train1);trainingExamples.add(train0);
//		
//		KNN knn = new KNN();
//		ArrayList<GeneralExample> nearestN = (ArrayList<GeneralExample>) knn.getNearestNeighbours(1, trainingExamples, testExample);
//		
//		for(GeneralExample e: nearestN) {
//			for(BaseFeature f: e.getFeatures()) {
//				if(f instanceof StringFeature)
//					System.out.print(((StringFeature)f).getValue()+" ");
//				else if(f instanceof NumberFeature)
//					System.out.print(((NumberFeature)f).getValue()+" ");
//				
//				else
//					System.out.print(f+" ");
//			}
//			System.out.println();
//	
//		}
//	
//
//	}

}

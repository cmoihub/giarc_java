package problemTests;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.Before;
import org.junit.Test;
import Problem.*;
/**
 * 
 * @author Issa
 *
 */
public class PredictorTest {

	private GeneralPredictor p;
	private ArrayList<GeneralExample> trainingSet;
	private GeneralExample testExample;
	private GeneralExample h1;
	private GeneralExample h2;
	private GeneralExample h3;
	private GeneralExample h4;

	@Before
	public void setUp() throws Exception {	
		p = new GeneralPredictor();
		trainingSet = new ArrayList<GeneralExample>(); 
	}
	/*
	 * Tests to make sure that the nearestNeighbors stores the correct value if we have
	 * only one training example
	 */
//	@Test
//	public void testSetNearestNeighboursEmpty() {
//		p.setNearestNeighbours(1, trainingSet, testExample);
//		assertTrue(p.getNearestNeighbours().isEmpty());
//	}
		
	/*
	 * Test to ensure that given only one trainingExample the setNearestNeighbors will
	 * select that value
	 */
	@Test 
	public void testSetNearestNeighboursOne() {
		trainingSet.add(h1);
		p.setNearestNeighbours(1, trainingSet, testExample);
		assertEquals(h1,p.getNearestNeighbours().get(0));

	}
	@Test
	public void testSetPredictionOne() {
		trainingSet.add(h1);
		p.setNearestNeighbours(1, trainingSet, testExample);
		p.setPrediction("Price");
		assertTrue(p.getSimple()>0);
	}
	
	
	/*
	 * Test to make sure that SetNearestNeighbours generates and orders the list of 
	 * nearest neighbors correctly when given multiple training examples
	 */
	
	@Test 
	public void testSetNearestNeighboursMultiple() {
		trainingSet.add(h2);trainingSet.add(h3);trainingSet.add(h4);
		p.setNearestNeighbours(3, trainingSet, testExample);

		assertEquals(h3,p.getNearestNeighbours().get(0));
		
		
	}
	
	@Test
	public void testSetPredictionMultiple() {
		trainingSet.add(h1);

		trainingSet.add(h2);trainingSet.add(h3);trainingSet.add(h4);

		p.setNearestNeighbours(2, trainingSet, testExample);
		p.setPrediction("Price");
		assertTrue(p.getSimple()>0);
	}
	

	
	
}

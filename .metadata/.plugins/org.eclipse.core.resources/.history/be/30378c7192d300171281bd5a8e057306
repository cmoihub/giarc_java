package problemTests;
import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.Before;
import org.junit.Test;
import Problem.*;
import feature.ComplexFeature;
import feature.NumberFeature;
import feature.StringFeature;
/**
 * 
 * @author Issa
 *
 */
public class PredictorTest {

	private GeneralPredictor predictor;
	GeneralExample t1;
	ComplexFeature b1;

	@Before
	public void setUp() throws Exception {	
		predictor = new GeneralPredictor();
		t1 = new GeneralExample();
		b1 = new ComplexFeature();
	}
	
	@Test
	public void test(){
		//Tuple #1 (TRAINING ROW 1)

		//ball
		ComplexFeature b1 = new ComplexFeature();
			NumberFeature disb1 = new NumberFeature(1.9);
			NumberFeature dirb1 = new NumberFeature(-167);
		b1.addFeature(disb1);b1.addFeature(dirb1);
		
		//goal
		ComplexFeature g1 = new ComplexFeature();
			NumberFeature disg1 = new NumberFeature(63.8);
			NumberFeature dirg1 = new NumberFeature(31);
		g1.addFeature(disg1);g1.addFeature(dirg1);
		
		//Flags
		ComplexFeature f1 = new ComplexFeature();
			//fct
			ComplexFeature fct1 = new ComplexFeature();
				NumberFeature dft1 = new NumberFeature(39.1);
				NumberFeature drft1 = new NumberFeature(-41);
			fct1.addFeature(dft1);fct1.addFeature(drft1);
			//fcb
			ComplexFeature fcb1 = new ComplexFeature();
				NumberFeature dfb1 = null;
				NumberFeature drfb1 = null;
			fcb1.addFeature(dfb1);fcb1.addFeature(drfb1);
		
		f1.addFeature(fct1);f1.addFeature(fcb1);
			
		
		//Action
		StringFeature a1 = new StringFeature("Kick");
		//Compose Example
		t1.addFeature(b1);t1.addFeature(g1);t1.addFeature(f1);t1.addFeature(a1);
		
		/*
		 * Tuple2
		 */
		GeneralExample t2 = new GeneralExample();
		//ball
		ComplexFeature b2 = new ComplexFeature();
			NumberFeature disb2 = new NumberFeature(1900);
			NumberFeature dirb2 = new NumberFeature(-16700);
		b2.addFeature(disb2);b2.addFeature(dirb2);
		
		//goal
		ComplexFeature g2 = new ComplexFeature();
			NumberFeature disg2 = new NumberFeature(638);
			NumberFeature dirg2 = new NumberFeature(3551);
		g2.addFeature(disg2);g2.addFeature(dirg2);
		
		//Flags
		ComplexFeature f2 = new ComplexFeature();
			//fct
			ComplexFeature fct2 = new ComplexFeature();
				NumberFeature dft2 = new NumberFeature(55539.1);
				NumberFeature drft2 = new NumberFeature(-45551);
			fct2.addFeature(dft2);fct2.addFeature(drft2);
			//fcb
			ComplexFeature fcb2 = new ComplexFeature();
				NumberFeature dfb2 = null;
				NumberFeature drfb2 = null;
			fcb2.addFeature(dfb2);fcb2.addFeature(drfb2);
		
		f2.addFeature(fct2);f2.addFeature(fcb2);

		//Action
		StringFeature a2 = new StringFeature("Kick");
		//Compose Example
		t2.addFeature(b2);t2.addFeature(g2);t2.addFeature(f2);t2.addFeature(a2);
		
		
		
		/*
		 * Tuple3 (TRAINING ROW 15)
		 */
		GeneralExample t3 = new GeneralExample();
		
		//ball
		ComplexFeature b3 = new ComplexFeature();
		NumberFeature distB3 = new NumberFeature(41.4);
		NumberFeature dirB3 = new NumberFeature(0);
		b3.addFeature(distB3);b3.addFeature(dirB3);
		
		//goal
		ComplexFeature g3 = new ComplexFeature();
		NumberFeature distG3 = new NumberFeature(90.1);
		NumberFeature dirG3 = new NumberFeature(18);
		g3.addFeature(distG3);g3.addFeature(dirG3);
		
		//flags 
		ComplexFeature f3 = new ComplexFeature();
		
		ComplexFeature fct3 = new ComplexFeature();
		NumberFeature ft3Dist = new NumberFeature(65.1);
		NumberFeature ft3Dir = new NumberFeature(-27);
		fct3.addFeature(ft3Dist);fct3.addFeature(ft3Dist);
		
		ComplexFeature fcb3 = new ComplexFeature();
		NumberFeature fb3Dist = null;
		NumberFeature fb3Dir = null;
		fcb3.addFeature(fb3Dist);fcb3.addFeature(fb3Dir);
		
		f3.addFeature(fct3);f3.addFeature(fcb3);
		
		//action
		StringFeature a3 = new StringFeature("Turn");
		
		//compose example
		t3.addFeature(b3);t3.addFeature(g3);t3.addFeature(f3);
		t3.addFeature(a3);

		
		/*
		 * running predictor
		 */
		
		ArrayList<GeneralExample> train = new ArrayList<GeneralExample>();
		train.add(t2);train.add(t3);
		
		predictor.setNearestNeighbours(1, train, t1);
		
		predictor.setPrediction();
		Object o = predictor.getPrediction();
		if(o instanceof String){
			assertNotNull((String)o);
		}
		else{
			assertNotNull((Double)o);
		}
	}	
}

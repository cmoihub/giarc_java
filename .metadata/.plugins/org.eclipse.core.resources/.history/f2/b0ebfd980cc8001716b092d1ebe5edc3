package Problem;

import javax.swing.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

/**
 * Created by CraigBook on 2017-11-09.
 */
public class Problem {
    private static final String [] featureStrings = {"age", "sqft", "coordinates", "latitude", "longitude", "price"};
    private ArrayList<Example> trainingExamples;
    private Example testExample;
    private Set<Feature> features;
    private String featureToPredict = "";
    private Feature featureToPredict_ = new Price();
    public DefaultListModel<String> feature_all_defaultListModel;
    public DefaultListModel<Feature> feature_selected_defaultListModel;
    private int trainingExampleNumber;
    private Object[][] trainingExampleData;
    private Object[] trainingExampleColumns;
    Problem(){
        features = new HashSet<Feature>();
        trainingExamples = new ArrayList<Example>();
        testExample = new Example();
        feature_all_defaultListModel = new DefaultListModel<>();
//        setFeatureToPredict(this.featureToPredict);
        setFeatureToPredict(new Price());
        for (int i = 0; i < featureStrings.length; i ++){
        	feature_all_defaultListModel.addElement(featureStrings[i]);
        }
        feature_selected_defaultListModel = new DefaultListModel<>();
    }

    /**
     * convert feature in string form to an actual feature
     *
     * @param feature
     */
    public void addFeatures(String feature) {
        switch (feature){
            case "age":addFeature(new Age_());
            break;
            case "square feet": addFeature(new SquareFeet());
            break;
            case "latitude": addFeature(new Latitude());
            break;
            case "longitude": addFeature(new Longitude());
            break;
            case "coordinates": addFeature(new Coordinates());
            break;
            case "price": addFeature(new Price());
            default:
                System.out.println("Todo: Implement complex feature");
                break;
        }
    }

    /**
     *add feature f to the set of features and update the model 
     *
     * @param f
     */
    public void addFeature(Feature f){
        if(!features.contains(f) || feature_selected_defaultListModel.contains(f)){
            features.add(f);
            feature_selected_defaultListModel.addElement(f);
        }
    }
//
//    /**
//     * change the feature that is to be predicted 
//     *
//     * @param featureToPredict
//     */
//    public void setFeatureToPredict(String featureToPredict) {
//        if(this.featureToPredict.equals("") || this.featureToPredict.equals(null)){
//            this.featureToPredict = "price" ;
//        }
//        else {
//        	this.featureToPredict = featureToPredict;
//        }
//    }

    /**
     *
     * @param f
     */
    public void setFeatureToPredict(Feature f){
        featureToPredict_ = f;
    }

    /**
     *
     * @return
     */
    public Feature getFeatureToPredict() {
        return featureToPredict_;
    }

    public void setExamples(){
        for (Example example : trainingExamples){
            example.setFeatures(features);
        }
        Set<Feature> copy = new HashSet<Feature>(features);
        copy.remove(getFeatureToPredict());
        testExample.setFeatures(copy);
    }
    
    public void setTrainingExampleNo(int no){
    	trainingExampleNumber = no;
    }

    public Object[][] getTrainingExamples() {	
		return trainingExampleData;		
	}
	
	public Object[] getColumns(){
		return trainingExampleColumns;
	}
}

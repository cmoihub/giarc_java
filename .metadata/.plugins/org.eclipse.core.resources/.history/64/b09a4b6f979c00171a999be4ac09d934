/**
 * Class Room - a room in an adventure game.
 *
 * This class is part of the "World of Zuul" application. 
 * "World of Zuul" is a very simple, text based adventure game.  
 *
 * A "Room" represents one location in the scenery of the game.  It is 
 * connected to other rooms via exits.  The exits are labelled north, 
 * east, south, west.  For each direction, the room stores a reference
 * to the neighboring room, or null if there is no exit in that direction.
 * 
 * @author  Michael KÃ¶lling and David J. Barnes
 * @version 2011.07.31
 */
public class Room 
{
    public String description;
    private Room northExit;
    private Room southExit;
    private Room eastExit;
    private Room westExit;
    private static final String north = "north";
    private static final String south = "south";
    private static final String east = "east";
    private static final String west = "west";
    

    /**
     * Create a room described "description". Initially, it has
     * no exits. "description" is something like "a kitchen" or
     * "an open court yard".
     * @param description The room's description.
     */
    public Room(String description) 
    {
        this.description = description;
    }

    /**
     * Define the exits of this room.  Every direction either leads
     * to another room or is null (no exit there).
     * @param north The north exit.
     * @param east The east east.
     * @param south The south exit.
     * @param west The west exit.
     */
    public void setExits(Room north, Room east, Room south, Room west) 
    {
        if(north != null)
            setNorthExit(north);
        if(east != null)
            setEastExit(east);
        if(south != null)
            setSouthExit(south);
        if(west != null)
            setWestExit(west);
    }

    /**
     * @return The description of the room.
     */
    public String getDescription()
    {
        return description;
    }

	public Room getExits(String direction){
		if(direction.equals(north)) {
            return northExit;
        }
		else if(direction.equals(south)) {
            return southExit;
        }
		else if(direction.equals(south)) {
            return eastExit;
        }
		else if(direction.equals(west)) {
            return westExit;
        }
		return null;
	}
	public Room getWestExit() {
		return westExit;
	}

	public void setWestExit(Room westExit) {
		this.westExit = westExit;
	}

	public Room getEastExit() {
		return eastExit;
	}

	public void setEastExit(Room eastExit) {
		this.eastExit = eastExit;
	}

	public Room getSouthExit() {
		return southExit;
	}

	public void setSouthExit(Room southExit) {
		this.southExit = southExit;
	}

	public Room getNorthExit() {
		return northExit;
	}

	public void setNorthExit(Room northExit) {
		this.northExit = northExit;
	}

}

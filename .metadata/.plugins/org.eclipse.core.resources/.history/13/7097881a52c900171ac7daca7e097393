package Problem;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

//import KNN.Feature;

/**
 * Class for comparing metrics amongst examples
 */
public class MetricEvaluator {
	Example testExample;
	List<Feature> testFeatures;

	/**
	 * The class is usually tied to some test example
	 * @param test
	 */
	public MetricEvaluator(Example test){
		setTestExample(test);
	}
	
	public MetricEvaluator(){
		
	}
	
	/**
	 * 
	 * @param test
	 */
	public void setTestExample(Example test){
		testExample = test;
		setTestExampleList();
//		testFeatures = testExample.getFeatureList();
	}
	
	public void setTestExampleList(){
		if (testExample!=null){
			testFeatures = testExample.getFeatureList();
		}
	}
	/**
	 *
	 * Calculate the sum of distances between a training example and a test example
	 *
	 * @param trainingExample
	 * @return
	 */
	public double sumOfDistances(Example trainingExample) {
    	Double distance = 0.0;
    	/*
    	 * if list contains a certain kind of feature add the distance metric associated with that feature to the distance variable
    	 */
    	List<Feature> trainingFeatures = trainingExample.getFeatureList();
    	Feature  trainingFeature, testFeature;
    	for (int i = 0; i < trainingFeatures.size(); i++){
    		trainingFeature = trainingFeatures.get(i);
    		testFeature = testFeatures.get(i);
    		/*
    		 * test feature is null given that is the predicted feature, 
    		 * so as to avoid a null pointer exception we don't compare the empty feature to it's corresponding feature from the training example 
    		 */
    		if(testFeature!=null){
    			distance+=trainingFeature.getMetric().calculateDistance(trainingFeature.getValue(), testFeature.getValue());
    		}
    		else continue;
    	}
		return distance;
    }
}

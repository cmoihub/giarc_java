package Problem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Class for running KNN algorithm
 * @author CraigBook
 *
 */
public class KNN {
	private MetricEvaluator metricEvaluator;
	private HashMap<Example, Double> distances;
	
	public KNN(){
		metricEvaluator = new MetricEvaluator();
		distances = new HashMap<>();
	}
	/**
	 * setup the k nearest neighbours list to some test example based on a list of training examples
	 *
	 * @param k number of nearest neighbours to return
	 * @return
	 */
	public void setNearestNeighbours(int k, ArrayList<Example> trainingExamples, Example testExample) {
		//prevents empty lists from being passed
		if (trainingExamples.isEmpty()){
			return;
		}
		metricEvaluator.setTestExample(testExample);
		mapTrainingExamplesToTestExample(trainingExamples, metricEvaluator);
		Map<Example, Double> sortedDistances = sortMapByValue(distances);
		checkDistances(sortedDistances);
		List<Example> allDataPoints = new ArrayList<>(sortedDistances.keySet());
//       Pick the first k items
		for (int i = 0; i < k; i++) {
			nearestNeighbours.add(allDataPoints.get(i));
		}
	}
	
	
	/**
	 * 
	 * @param distances
	 */
	private void checkDistances(Map<Example, Double> distances){
		for (Double value : distances.values()) {
			System.out.println(value);
		}
	}
	
	/**
	 * map training examples to their distance to the test example
	 * 
	 * @param trainingExamples
	 * @param metricEvaluator
	 */
	private void mapTrainingExamplesToTestExample(ArrayList<Example> trainingExamples, MetricEvaluator metricEvaluator){
		for (int i = trainingExamples.size() - 1; i >= 0; i--) {
			distances.put(trainingExamples.get(i), metricEvaluator.sumOfDistances(trainingExamples.get(i)));
		}
	}

	/**
	 *
	 * @return the nearest neighbours
	 */
	public List<Example> getNearestNeighbours() {
		return nearestNeighbours;
	}

	/**
	 *
	 * @param map
	 * @param <K>
	 * @param <V>
	 * @return a hashmap that has been sorted by value
	 */
	private static <K, V extends Comparable<? super V>> Map<Example, Double> sortMapByValue(Map<Example, Double> map) {
		return map.entrySet()
				.stream()
				.sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
				.collect(Collectors.toMap(
						Map.Entry::getKey,
						Map.Entry::getValue,
						(e1, e2) -> e1,
						LinkedHashMap::new
				));
	}
}

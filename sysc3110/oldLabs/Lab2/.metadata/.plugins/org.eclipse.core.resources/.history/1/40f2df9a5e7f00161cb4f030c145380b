import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;

/**
 *  This class is the main class of the "World of Zuul" application. 
 *  "World of Zuul" is a very simple, text based adventure game.  Users 
 *  can walk around some scenery. That's all. It should really be extended 
 *  to make it more interesting!
 * 
 *  To play this game, create an instance of this class and call the "play"
 *  method.
 * 
 *  This main class creates and initialises all the others: it creates all
 *  rooms, creates the parser and starts the game.  It also evaluates and
 *  executes the commands that the parser returns.
 * 
 * @author  Michael KÃ¶lling and David J. Barnes
 * @version 2011.07.31
 */

public class Game 
{
	private Parser parser;
	private Room currentRoom;
	private Deque<Room> RoomTraceStack;
	private final int HoldingCapacity;
	private int CurrentLoad = 0;
	private Deque<Item> CarryingList;

	/**
	 * Create the game and initialise its internal map.
	 */
	public Game(int capacity) 
	{
		createRooms();
		parser = new Parser();
		RoomTraceStack = new ArrayDeque<Room>();
		HoldingCapacity = capacity;
		CarryingList = new ArrayDeque<Item>();
	}

	/**
	 * Create all the rooms and link their exits together.
	 */
	private void createRooms()
	{
		Room outside, theater, pub, lab, office, patio, basement;

		// create the rooms
		outside = new Room("outside the main entrance of the university");
		theater = new Room("in a lecture theater");
		pub = new Room("in the campus pub");
		lab = new Room("in a computing lab");
		office = new Room("in the computing admin office");
		patio = new Room("on a patio over the pub");
		basement = new Room("in a dark basement where all you can do is give up on life"); //NO EXIT

		// initialise room exits
		outside.setExit(Helper.EAST, theater);
		outside.setExit(Helper.SOUTH, lab);
		outside.setExit(Helper.WEST, pub);
		outside.AddItem("a small tree", 95);

		theater.setExit(Helper.WEST, outside);
		theater.setExit(Helper.DOWN, basement);
		theater.AddItem("a chair", 25);
		theater.AddItem("a chair", 35);

		pub.setExit(Helper.EAST, outside);
		pub.setExit(Helper.UP, patio);
		pub.AddItem("a stool", 9);

		lab.setExit(Helper.NORTH, outside);
		lab.setExit(Helper.EAST, office);
		lab.AddItem("a labcoat", 1);

		office.setExit(Helper.WEST, lab);
		office.AddItem("a desk", 70);
		office.AddItem("a pen", 3);
		office.AddItem("a laptop", 12);
		
		patio.setExit(Helper.DOWN, pub);

		currentRoom = outside;  // start game outside
	}

	/**
	 *  Main play routine.  Loops until end of play.
	 */
	public void play() 
	{            
		printWelcome();

		// Enter the main command loop.  Here we repeatedly read commands and
		// execute them until the game is over.

		boolean finished = false;
		while (! finished) {
			Command command = parser.getCommand();
			finished = processCommand(command);
		}
		System.out.println("Thank you for playing.  Good bye.");
	}

	/**
	 * Print out the opening message for the player.
	 */
	private void printWelcome()
	{
		System.out.println();
		System.out.println("Welcome to the World of Zuul!");
		System.out.println("World of Zuul is a new, incredibly boring adventure game.");
		System.out.println("Type 'help' if you need help.");
		System.out.println();
		System.out.println(currentRoom.GetFullDescription());
	}

	/**
	 * Given a command, process (that is: execute) the command.
	 * @param command The command to be processed.
	 * @return true If the command ends the game, false otherwise.
	 */
	private boolean processCommand(Command command) 
	{
		boolean wantToQuit = false;

		if(command.isUnknown()) {
			System.out.println("I don't know what you mean...");
			return false;
		}

		String commandWord = command.getCommandWord();
		if (commandWord.equals(Helper.HELP)) {
			printHelp();
		}
		else if (commandWord.equals(Helper.GO)) {
			goRoom(command);
		}
		else if (commandWord.equals(Helper.QUIT)) {
			wantToQuit = quit(command);
		}
		else if (commandWord.equals(Helper.LOOK)) {
			Look(command);
		}
		else if (commandWord.equals(Helper.BACK)) {
			GoBack();
		}
		else if (commandWord.equals(Helper.PICK)) {
			Pick();
		}
		else if (commandWord.equals(Helper.DROP)) {
			Drop();
		}
		
		return wantToQuit;
	}

	private void Drop() 
	{
		if(CarryingList.size() > 0)
		{
			Item itemToAdd = CarryingList.pop();
			currentRoom.AddItem(itemToAdd.GetDescription(), itemToAdd.GetWeight());
			CurrentLoad = CurrentLoad - itemToAdd.GetWeight();
		}
		else
		{
			System.out.println("Nothing to drop");
		}
		System.out.println(currentRoom.GetFullDescription());
	}

	private void Pick() 
	{
		if(currentRoom.NumberOfItemsInRoom() > 0)
		{
			int weight = currentRoom.GetItem().GetWeight();
			if(weight + CurrentLoad <= HoldingCapacity)
			{
				CarryingList.push(currentRoom.RemoveItem());
				CurrentLoad = CurrentLoad + weight;
			}
			else
			{
				System.out.println("Cannot pick up this item that weighs " + weight + " lbs and you are at " + CurrentLoad + ".");
			}
		}
		else
		{
			System.out.println("Nothing to pick up");
		}
		System.out.println(currentRoom.GetFullDescription());
	}

	private void GoBack() 
	{
		if(RoomTraceStack.size() > 0 && currentRoom.HasExit())
		{
			currentRoom = RoomTraceStack.pop();
			System.out.println(currentRoom.GetFullDescription());
		}
		else if(!currentRoom.HasExit())
		{
			System.out.println("YOU ARE IN THE BASEMENT. THERS IS NO WAY BACK!");
		}
		else
		{
			System.out.println("You are at your original starting location.");
		}
		System.out.println(currentRoom.GetFullDescription());
	}

	private void Look(Command command) 
	{
		System.out.println(currentRoom.GetFullDescription());
	}

	/**
	 * Print out some help information.
	 * Here we print some stupid, cryptic message and a list of the 
	 * command words.
	 */
	private void printHelp() 
	{
		System.out.println("You are lost. You are alone. You wander");
		System.out.println("around at the university.");
		System.out.println();
		System.out.println("Your command words are:");
		parser.printValidCommands();
	}

	/** 
	 * Try to go in one direction. If there is an exit, enter
	 * the new room, otherwise print an error message.
	 */
	private void goRoom(Command command) 
	{
		if(!command.hasSecondWord()) {
			// if there is no second word, we don't know where to go...
			System.out.println("Go where?");
			return;
		}

		String direction = command.getSecondWord();

		// Try to leave current room.
		Room nextRoom = currentRoom.GetRoom(direction);
		if (nextRoom == null) {
			System.out.println("There is no door!");
		}
		else {
			RoomTraceStack.push(currentRoom);
			currentRoom = nextRoom;
			System.out.println(currentRoom.GetFullDescription());
		}
	}

	/** 
	 * "Quit" was entered. Check the rest of the command to see
	 * whether we really quit the game.
	 * @return true, if this command quits the game, false otherwise.
	 */
	private boolean quit(Command command) 
	{
		if(command.hasSecondWord()) {
			System.out.println("Quit what?");
			return false;
		}
		else {
			return true;  // signal that we want to quit
		}
	}    

	public static void main(String[] args)
	{
		int capacity = -1;
		Scanner scanner = new Scanner(System.in);
		while(capacity < 0)
		{
			try
			{
				System.out.println("Input your total carrying capacity in lbs and press <Enter>.");  
				System.out.print("> ");
				String inputLine = scanner.nextLine();
				capacity = Integer.parseInt(inputLine);
			}
			catch(Exception ex)
			{
				capacity = -1;
			}			
		}
		Game game = new Game(capacity);
		game.play();
	}
}
